basePath: /
definitions:
  models.Product:
    properties:
      description:
        type: string
      id:
        type: string
      name:
        type: string
      price:
        type: integer
    type: object
host: localhost:8082
info:
  contact: {}
  description: REST API sederhana dengan Golang dan PostgreSQL.
  title: Product API
  version: "1.0"
paths:
  /products:
    get:
      description: Get list of all products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Product'
            type: array
      summary: Get all products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Create a new product entry
      parameters:
      - description: Product data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.Product'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Product'
        "400":
          description: Invalid input
          schema:
            type: object
      summary: Create new product
      tags:
      - products
  /products/{id}:
    delete:
      description: Delete product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'message: Product deleted'
          schema:
            type: object
        "404":
          description: Product not found
          schema:
            type: object
      summary: Delete product
      tags:
      - products
    get:
      description: Get product details by product ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Product'
        "404":
          description: Product not found
          schema:
            type: object
      summary: Get product by ID
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Update existing product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated product data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.Product'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Product'
        "400":
          description: Invalid input
          schema:
            type: object
        "404":
          description: Product not found
          schema:
            type: object
      summary: Update product
      tags:
      - products
swagger: "2.0"
